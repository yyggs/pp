Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -O3 -ipo -qopt-report=5 -qopt-report-file=report.txt -o MD -lm

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/8=12.5%] control.c(14,33)
  -> INLINE (MANUAL): (28,11) atoi(const char *) (isz = 4) (sz = 11)
    -> EXTERN: /usr/include/stdlib.h:(363,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (34,3) memset(void *, int, size_t)
  -> EXTERN: (35,3) memset(void *, int, size_t)
  -> EXTERN: (36,3) memset(void *, int, size_t)
  -> EXTERN: (37,3) memset(void *, int, size_t)
  -> EXTERN: (38,3) memset(void *, int, size_t)
  -> EXTERN: (39,3) memset(void *, int, size_t)
  -> EXTERN: (40,3) memset(void *, int, size_t)
  -> EXTERN: (41,3) memset(void *, int, size_t)
  -> EXTERN: (46,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (49,5) perror(const char *)
  -> EXTERN: (50,5) exit(int)
  -> EXTERN: (54,5) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (59,3) fclose(FILE *)
  -> INLINE: (65,11) second() (isz = 9) (sz = 14)
    -> EXTERN: (101,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (67,13) second() (isz = 9) (sz = 14)
    -> EXTERN: (101,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (68,7) evolve(int, double) (isz = 209) (sz = 216)
    -> EXTERN: MD.c:(17,5) printf(const char *__restrict__, ...)
    -> EXTERN: MD.c:(18,5) printf(const char *__restrict__, ...)
  -> INLINE: (69,12) second() (isz = 9) (sz = 14)
    -> EXTERN: (101,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (70,7) printf(const char *__restrict__, ...)
  -> EXTERN: (71,7) printf(const char *__restrict__, ...)
  -> EXTERN: (72,7) fflush(FILE *)
  -> EXTERN: (74,7) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (75,13) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (78,2) perror(const char *)
  -> EXTERN: (79,2) exit(int)
  -> EXTERN: (83,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (88,7) fclose(FILE *)
  -> INLINE: (90,9) second() (isz = 9) (sz = 14)
    -> EXTERN: (101,13) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (91,3) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at control.c(53,3)
   remark #15527: loop was not vectorized: function call to fscanf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ control.c(54,5) ]
LOOP END

LOOP BEGIN at control.c(66,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MD.c(16,3) inlined into control.c(68,7)
      remark #25236: Loop with pragma of trip count = 100 ignored for large value
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MD.c(21,5) inlined into control.c(68,7)
      <Distributed chunk1>
         remark #25426: Loop Distributed (4 way) 
         remark #25408: memset generated
         remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      LOOP END

      LOOP BEGIN at MD.c(21,5) inlined into control.c(68,7)
      <Distributed chunk2>
         remark #15388: vectorization support: reference r[i] has aligned access   [ MD.c(24,11) ]
         remark #15388: vectorization support: reference r[i] has aligned access   [ MD.c(24,11) ]
         remark #15388: vectorization support: reference r[i] has aligned access   [ MD.c(24,11) ]
         remark #15388: vectorization support: reference r[i] has aligned access   [ MD.c(24,11) ]
         remark #15388: vectorization support: reference r[i] has aligned access   [ MD.c(24,11) ]
         remark #15388: vectorization support: reference r[i] has aligned access   [ MD.c(24,11) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][dim]>, stride is 3   [ MD.c(24,19) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][dim]>, stride is 3   [ MD.c(24,33) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][dim]>, stride is 3   [ MD.c(24,19) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][dim]>, stride is 3   [ MD.c(24,33) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][dim]>, stride is 3   [ MD.c(24,19) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][dim]>, stride is 3   [ MD.c(24,33) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 3 
         remark #15452: unmasked strided loads: 6 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 27 
         remark #15477: vector cost: 18.000 
         remark #15478: estimated potential speedup: 1.500 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 16
         remark #25015: Estimate of max trip count of loop=512

         LOOP BEGIN at MD.c(23,7) inlined into control.c(68,7)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END
      LOOP END

      LOOP BEGIN at MD.c(21,5) inlined into control.c(68,7)
      <Distributed chunk3>
         remark #15388: vectorization support: reference r[i] has aligned access   [ MD.c(26,7) ]
         remark #15388: vectorization support: reference r[i] has aligned access   [ MD.c(26,19) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 44 
         remark #15477: vector cost: 17.000 
         remark #15478: estimated potential speedup: 2.580 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=512
      LOOP END

      LOOP BEGIN at MD.c(21,5) inlined into control.c(68,7)
      <Distributed chunk4>
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at MD.c(27,7) inlined into control.c(68,7)
            remark #15389: vectorization support: reference f[i][dim] has unaligned access   [ MD.c(28,11) ]
            remark #15389: vectorization support: reference velo[i][dim] has unaligned access   [ MD.c(28,33) ]
            remark #15388: vectorization support: reference wind[dim] has aligned access   [ MD.c(28,57) ]
            remark #15389: vectorization support: reference pos[i][dim] has unaligned access   [ MD.c(28,95) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.327
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 51 
            remark #15477: vector cost: 26.000 
            remark #15478: estimated potential speedup: 1.270 
            remark #15486: divides: 1 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at MD.c(27,7) inlined into control.c(68,7)
         <Remainder loop for vectorization>
            remark #25436: completely unrolled by 1  
         LOOP END
      LOOP END

      LOOP BEGIN at MD.c(34,5) inlined into control.c(68,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=4096

         LOOP BEGIN at MD.c(35,7) inlined into control.c(68,7)
         <Peeled loop for vectorization>
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 13
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at MD.c(35,7) inlined into control.c(68,7)
            remark #15388: vectorization support: reference radius[j] has aligned access   [ MD.c(46,28) ]
            remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(51,36) ]
            remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(52,36) ]
            remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(51,36) ]
            remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(52,36) ]
            remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(51,36) ]
            remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(52,36) ]
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(38,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[j][l]>, stride is 3   [ MD.c(38,41) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(39,22) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(39,40) ]
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(38,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[j][l]>, stride is 3   [ MD.c(38,41) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(39,22) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(39,40) ]
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(38,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[j][l]>, stride is 3   [ MD.c(38,41) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(39,22) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(39,40) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(51,46) ]
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[j][l]>, stride is 3   [ MD.c(52,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[j][l]>, stride is 3   [ MD.c(52,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(52,46) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(51,46) ]
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[j][l]>, stride is 3   [ MD.c(52,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[j][l]>, stride is 3   [ MD.c(52,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(52,46) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(51,46) ]
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[j][l]>, stride is 3   [ MD.c(52,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[j][l]>, stride is 3   [ MD.c(52,11) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[k][l]>, stride is 3   [ MD.c(52,46) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.286
            remark #15355: vectorization support: at (51:11) is double type reduction   [ MD.c(51,11) ]
            remark #15355: vectorization support: at (51:11) is double type reduction   [ MD.c(51,11) ]
            remark #15355: vectorization support: at (51:11) is double type reduction   [ MD.c(51,11) ]
            remark #15355: vectorization support: collisions is int type reduction   [ control.c(14,33) ]
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 7 
            remark #15452: unmasked strided loads: 18 
            remark #15453: unmasked strided stores: 6 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 395 
            remark #15477: vector cost: 239.500 
            remark #15478: estimated potential speedup: 1.640 
            remark #15486: divides: 6 
            remark #15487: type converts: 6 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=2048

            LOOP BEGIN at MD.c(37,9) inlined into control.c(68,7)
               remark #25436: completely unrolled by 3   (pre-vector) 
            LOOP END

            LOOP BEGIN at MD.c(50,9) inlined into control.c(68,7)
               remark #25436: completely unrolled by 3   (pre-vector) 
            LOOP END
         LOOP END

         LOOP BEGIN at MD.c(60,7) inlined into control.c(68,7)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END

         LOOP BEGIN at MD.c(35,7) inlined into control.c(68,7)
         <Remainder loop for vectorization>
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
            remark #25015: Estimate of max trip count of loop=4096
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at control.c(82,7)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ control.c(83,2) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

MD.c(24,19):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
MD.c(24,19):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
MD.c(24,19):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
MD.c(24,19):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
MD.c(38,41):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
MD.c(38,11):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
MD.c(51,46):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
MD.c(52,11):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
MD.c(52,11):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 24 }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
control.c(34,3):remark #34026: call to memset implemented as a call to optimized library version
control.c(35,3):remark #34026: call to memset implemented as a call to optimized library version
control.c(36,3):remark #34026: call to memset implemented as a call to optimized library version
control.c(37,3):remark #34026: call to memset implemented as a call to optimized library version
control.c(38,3):remark #34026: call to memset implemented as a call to optimized library version
control.c(39,3):remark #34026: call to memset implemented as a call to optimized library version
control.c(40,3):remark #34026: call to memset implemented as a call to optimized library version
control.c(41,3):remark #34026: call to memset implemented as a call to optimized library version
MD.c(21,5):remark #34026: call to memset implemented as a call to optimized library version
control.c(14,33):remark #34051: REGISTER ALLOCATION : [main] control.c:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     498
            Global    :     103
            Local     :     395
        Regenerable   :     105
        Spilled       :      24
        
    Routine stack
        Variables     :     180 bytes*
            Reads     :      10 [4.03e-08 ~ 0.0%]
            Writes    :       2 [4.97e-09 ~ 0.0%]
        Spills        :     152 bytes*
            Reads     :      23 [5.36e-01 ~ 0.5%]
            Writes    :      23 [1.58e-03 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: evolve(int, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (evolve(int, double)) MD.c(10,33)

===========================================================================

Begin optimization report for: atoi(const char *)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (atoi(const char *))/usr/include/stdlib.h(362,1)

===========================================================================

Begin optimization report for: second()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (second()) control.c(96,1)

===========================================================================

Begin optimization report for: vis_forces(int, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (vis_forces(int, double *, double *, double *)) util.c(4,1)

===========================================================================

Begin optimization report for: wind_forces(int, double *, double *, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (wind_forces(int, double *, double *, double)) util.c(11,1)

===========================================================================

Begin optimization report for: add_norms(int, double *, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (add_norms(int, double *, double *)) util.c(18,1)

===========================================================================

Begin optimization report for: forces(double, double, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (forces(double, double, double)) util.c(25,51)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: control.c
        main(int, char **)[Line    14]


  0 out of 1 routine(s) used training profile data for PGO feedback
  0 out of 1 routine(s) were unable to use training profile data for PGO feedback
  0 out of 1 routine(s) were unable to find training profile data for PGO feedback
  1 out of 1 routine(s) used a static estimate profile for PGO feedback



